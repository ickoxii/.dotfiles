#!/opt/homebrew/bin/bash

# .bash_functions
# Author: Icko Iben
# Created on: Fri; 15 Sep 2023; 07:04 CDT
# Last Modified: Fri; 15 Sep 2023; 07:04 CDT
# Description: Contains bash functions

# DEBUG
# echo "in .bash_functions"

# --------------------------------------------------------------------------- #
# =====================
# Markdown Live Preview
# =====================

# Temporary files for tracking PIDs
WATCH_PID_FILE="/tmp/watch_pid"
EVINCE_PID_FILE="/tmp/evince_pid"
PREAMBLE="$HOME/.dotfiles-and-scripts/latex/preambles"

# ====================
# start_preview
# ====================
#
# Initiates the live markdown preview. If the markdown file does not exist,
# it touches a new markdown file first. Then it pandocs the markdown to PDF 
# immediately and starts watching for subsequent changes to the markdown file.
#
# Parameters:
#   $1 - Markdown file to be pandoc'd and watched.
#   $2 - PDF file name.
#
# Assumptions:
#   Assumes `fswatch`, `pandoc`, and `evince` are available in the system.
#
# Usage:
# $ start_preview input.md output.pdf
# -----------------------
start_preview() {
    local src="$1"
    local dest="$2"

    # If the markdown file does not exist, create it
    if [ ! -e "$src" ]; then
        touch "$src"
    fi

    # Pandoc the markdown immediately to PDF
    if pandoc "$src" --include-in-header=$PREAMBLE/math.tex --highlight-style=pygments -o "$dest"; then
        # Open the PDF in Evince only if pandoc was successful
        start_evince "$dest"
    else
        echo "Failed to convert markdown to PDF."
        return 1
    fi
    
    # Start the watch process and conversion mechanism
    start_watch "$src" "$dest" & echo $! > ~/.onmodify_pid
}

# =====================================
# stop_preview
# =====================================
#
# Description:
#   Stops all ongoing evince and onmodify processes.
#
# Assumptions:
#   Assumes ~/.onmodify_pid file is used to store the PID of the onmodify function.
#   Assumes /tmp/evince_pids file is used to store the PIDs of evince processes.
#
# Usage:
#   $ stop_preview
# -------------------
stop_preview() {
    if [ -f ~/.onmodify_pid ]; then
        kill -9 $(cat ~/.onmodify_pid) 2>/dev/null
        rm ~/.onmodify_pid
    fi

    if [ -f /tmp/evince_pids ]; then
        while IFS=: read -r pid file; do
            kill -9 "$pid" 2>/dev/null
        done < /tmp/evince_pids
        rm /tmp/evince_pids
    fi

    echo "All evince and onmodify processes stopped."
}

# =====================================
# start_watch
# =====================================
#
# Description:
#   Uses `fswatch` to monitor changes to a given markdown file and, on modification,
#   converts it to a PDF using `pandoc`.
#
# Parameters:
#   $1 - Markdown file to be watched.
#   $2 - PDF file to which the markdown will be converted.
#
# Usage:
#   Called internally by start_preview.
# -------------------
start_watch() {
    local src="$1"
    local dest="$2"
    onmodify /tmp/bufwrite "pandoc '$src' --include-in-header=$PREAMBLE/math.tex --highlight-style=pygments -o '$dest'"
}

# =======================================
# evince_running_for
# =======================================
#
# Description:
#   Helper function for onmodify. Checks if an evince process is
#   already open for a certain pdf.
# ------------------
evince_running_for() {
    local target_pdf="$1"
    # use grep to ensure we're matching exact filename
    pgrep -af "evince" | grep -q "$target_pdf"
}

# =======================================
# onmodify
# =======================================
#
# Description:
#   Watches for changes to a target (default is current directory).
#   When changes are detected, it executes the provided command.
#
# Parameters:
#   $1 - Target file or directory to watch.
#   $@ - Command to execute upon detected changes.
#
# Assumptions:
#   Assumes fswatch is available on the system.
# 
# Usage:
#   onmodify /path/to/watch "command to execute"
# -------------------
onmodify() {
    local TARGET=${1:-.}
    local dest="$2"
    shift; shift
    local CMD="$@"

    CMD="${CMD/pandoc /pandoc --include-in-header=$PREAMBLE/math.tex --highlight-style=pygments }"
    echo "Watching: $TARGET | Command: $CMD"
    
    fswatch -0 "$TARGET" | while read -d "" event; do
        sleep 0.2
        if bash -c "$CMD"; then
            echo "Successfully converted using pandoc."
            # Only start evince if it isn't already running for the given PDF.
            if ! evince_running_for "$dest"; then
                start_evince "$dest"
            fi
        else
            echo "Failed to convert using pandoc."
        fi
    done
}

# =======================================
# start_evince
# =======================================
#
# Description:
#   Opens the provided PDF file using the Evince PDF viewer.
#
# Parameters:
#   $1 - PDF file to be opened.
#
# Assumptions:
#   Assumes the `evince` tool is available on the system.
# 
# Usage:
#   Called internally by onmodify.
# -------------------------
start_evince() {
    echo "Attempting to open $1 with Evince..."
    evince "$@" &
    local pid=$!
    echo "$pid:$1" >> /tmp/evince_pids
    echo "Evince started for $1 with PID: $pid"
}
