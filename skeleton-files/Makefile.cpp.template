# File: Makefile
# Author: Icko Iben
# Date Created: 13 October 2023
# Date Last Modified: 16 October 2023
# Version: 1.0.2
#
# V1.0.0 - 10/13/2023
# - File created
# - Initial versions for: all, debug, soln, test, diff, clean
#
# V1.0.1 - 10/14/2023
# - Comments added
#
# V1.0.2 - 10/16/2023
# - Explicitly define CPP_FILES, EXECUTABLE and SOLN_EXEC
# - Added new targets testmore and diffmore that handles verbose output
#
# V1.0.3 - 10/19/2023
# - Added clean targets to clean output files
# - Added help target to print usage to screen

# Specify the source files                   // CHANGE
CPP_FILES := CPP_FILES_GOES_HERE
TEST_DRIVER := TEST_DRIVER_GOES_HERE

# Specify name of final executable           // CHANGE
EXECUTABLE := a
TEST_EXECUTABLE := b

# Name of professor's executable             // CHANGE
SOLN_EXEC := projectX_solution_osx

# Compiler flags
# Some typical ones to use are -Wall -Wextra -std=c++17 -g
# In order to link the ncurses library, we use `-lncurses`
CFLAGS := -Wall -Wextra -std=c++17 -g

# all
#
# Default target. This is run when `make` is called with no arguments.
# In this case, we build the target $(EXECUTABLE), which is the target
# specified below which compiles our program
all: $(EXECUTABLE)
.PHONY: all

# help
# 
# Prints make usage to screen
help:
	@echo "--------------------------------------------------------------------------------"
	@echo "     make [target]"
	@echo "--------------------------------------------------------------------------------"
	@echo "  target    -    description"
	@echo "No Target   - 'make' called with no targets will compile the project"
	@echo "all         - 'make' called with no targets will compile the project"
	@echo "json        - Creates VSCode configuration files for cpp debugging"
	@echo "soln        - Runs input files .io/input-[0-9].txt against professors"
	@echo "              executable. We run input files normally and with verbose output,"
	@echo "              saving files as ./io/soln-[0-9].txt and"
	@echo "              ./io/verbose-soln-[0-9].txt, respectively"
	@echo "test        - Compiles the specified test driver"
	@echo "run         - Runs input files against our projects executable. Our output files"
	@echo "              are saved as .io/output-[0-9].txt"
	@echo "runmore     - Runs input files against our projects executable, but with verbose"
	@echo "              output this time, saving files as .io/verbose-output-[0-9].txt"
	@echo "diff        - Runs a diff against each corresponding 'soln' and 'output' file"
	@echo "diffmore    - Runs a diff against each corresponding 'verbose-soln' and"
	@echo "              'verbose-output' file"
	@echo "clean       - Cleans all associated files. This includes the executable, "
	@echo "              solution files, and output files. It does this by 'rm'ing the exe,"
	@echo "              then calling 'make cleansoln' and 'make cleanout'"
	@echo "cleansoln   - Cleans the professors 'soln' and 'verbose-soln' files"
	@echo "cleanout    - Cleans our 'output' and 'verbose-output' files"
	@echo "gitadd      - Add .cpp and .h files to staging area"
	@echo "--------------------------------------------------------------------------------"
.PHONY: help

# $(EXECUTABLE)
#
# Compiles out program
$(EXECUTABLE): $(CPP_FILES)
	g++ $(CFLAGS) $(CPP_FILES) -o $(EXECUTABLE)

# soln
#
# Runs the professors solution with normal and verbose output.
soln:
	chmod +x $(SOLN_EXEC)
	@for f in io/input-*.txt; do \
		num=$$(basename $$f | sed 's/^input-//; s/\.txt$$//'); \
		echo "./$(SOLN_EXEC) < $$f > io/soln-$$num.txt"; \
		./$(SOLN_EXEC) < $$f > io/soln-$$num.txt; \
		echo "./$(SOLN_EXEC) printMore < $$f > io/verbose-soln-$$num.txt"; \
		./$(SOLN_EXEC) printMore < $$f > io/verbose-soln-$$num.txt; \
		echo; \
	done
	@echo "---------------"
.PHONY: soln

# run
#
# Runs our compiled project with normal output
run:
	@for f in io/input-*.txt; do \
		outfile=$$(basename $$f | sed 's/^input-/output-/'); \
		echo "./$(EXECUTABLE) < $$f > io/$$outfile"; \
		./$(EXECUTABLE) < $$f > io/$$outfile; \
		echo; \
	done
	@echo "---------------"
.PHONY: run

# runmore
#
# Runs our compiled project with verbose output
runmore:
	@for f in io/input-*.txt; do \
		verbose_outfile=$$(basename $$f | sed 's/^input-/verbose-output-/'); \
		echo "./$(EXECUTABLE) printMore < $$f > io/$$verbose_outfile"; \
		./$(EXECUTABLE) printMore < $$f > io/$$verbose_outfile; \
		echo; \
	done
	@echo "---------------"
.PHONY: runmore

# diff
#
# Checks our output with professors solution
diff:
	@for f in io/input-*.txt; do \
		num=$$(basename $$f .txt | sed 's/^input-//'); \
		echo "diff io/output-$$num.txt io/soln-$$num.txt"; \
		diff io/output-$$num.txt io/soln-$$num.txt; \
		echo; \
	done
	@echo "---------------"
.PHONY: diff

# diffmore
#
# Compares our verbose output with professors' verbose solutions.
diffmore:
	@for f in io/input-*.txt; do \
		num=$$(basename $$f .txt | sed 's/^input-//'); \
		echo "diff io/verbose-output-$$num.txt io/verbose-soln-$$num.txt"; \
		diff io/verbose-output-$$num.txt io/verbose-soln-$$num.txt; \
		echo; \
	done
	@echo "---------------"
.PHONY: diffmore

# json
#
# Creates vscode config files
json:
	mkdir .vscode	
	cp $(HOME)/skeleton-files/tasks.json ./.vscode/tasks.json
	cp $(HOME)/skeleton-files/launch.json ./.vscode/launch.json
	cp $(HOME)/skeleton-files/c_cpp_properties.json ./.vscode/c_cpp_properties.json
.PHONY: json

# clean
#
# Cleans up any executable created.
clean:
	rm -i $(EXECUTABLE)
	@make cleanout
	@make cleansoln
.PHONY: clean

# cleanout
#
# cleans up our output files.
cleanout:
	@for f in io/*output-*.txt; do \
		echo "rm -f $$f"; \
		rm -f $$f; \
	done	
	@echo
.PHONY: cleanout

# cleansoln
#
# Cleans professors output files.
cleansoln:
	@for f in io/*soln-*.txt; do \
		echo "rm -f $$f"; \
		rm -f $$f; \
	done
	@echo
.PHONY: cleansoln

# gitadd
#
# Stages files to get ready for commit
gitadd:
	git add -p $(CPP_FILES) $(H_FILES)
.PHONY: gitadd
